// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TripPlanner.Data.Postgres;

#nullable disable

namespace TripPlanner.Data.Postgres.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250930202007_firstMigration")]
    partial class firstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TripPlanner.Data.Postgres.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("TripPlanner.Data.Postgres.Entities.Itinerary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<float>("EstimatedCost")
                        .HasColumnType("real");

                    b.Property<Guid>("TransportTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Itineraries");
                });

            modelBuilder.Entity("TripPlanner.Data.Postgres.Entities.TransportType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("TripPlanner.Data.Postgres.Entities.Trip", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<int>("Days")
                        .HasColumnType("integer");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("TripPlanner.Domain.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ItineraryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ItineraryId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItineraryId");

                    b.HasIndex("ItineraryId1");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("TripPlanner.Domain.Itinerary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Day")
                        .HasColumnType("integer");

                    b.Property<float>("EstimatedCost")
                        .HasColumnType("real");

                    b.Property<Guid>("TransportTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TripId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("Itinerary");
                });

            modelBuilder.Entity("TripPlanner.Domain.Activity", b =>
                {
                    b.HasOne("TripPlanner.Data.Postgres.Entities.Itinerary", null)
                        .WithMany("Activities")
                        .HasForeignKey("ItineraryId");

                    b.HasOne("TripPlanner.Domain.Itinerary", null)
                        .WithMany("Activities")
                        .HasForeignKey("ItineraryId1");
                });

            modelBuilder.Entity("TripPlanner.Domain.Itinerary", b =>
                {
                    b.HasOne("TripPlanner.Data.Postgres.Entities.Trip", null)
                        .WithMany("Itinerary")
                        .HasForeignKey("TripId");
                });

            modelBuilder.Entity("TripPlanner.Data.Postgres.Entities.Itinerary", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("TripPlanner.Data.Postgres.Entities.Trip", b =>
                {
                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("TripPlanner.Domain.Itinerary", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
